//Contains Duplicate - Leetcode 217
class Solution {
    public int checkpalindrome(String s, int Left, int Right){
        int L = Left, R = Right;
        while(L>=0 && R<s.length() && s.charAt(L)==s.charAt(R)){
            L--;
            R++;
        }
        return R-L-1;

    }
    public String longestPalindrome(String s) {
         if(s==null || s.length()<1){
            return "";
         }
         
         int max = Integer.MIN_VALUE;
         int start =0, end =0;
         for(int i =0;i<s.length();i++){
             int len1 = checkpalindrome(s,i,i); //odd
             int len2 = checkpalindrome(s,i,i+1); //even
             int result = Math.max(len1,len2);
             if(max < result){
                max = result;
                start = i - (result - 1) / 2;
                end = i + (result / 2) + 1;
             }
         }
         return s.substring(start,end);
    }
}
---------------------------------------------------------------------------------------
// Permuntation Leetcode - 46

class Solution {
    public void allpermutations(int[] nums,List<List<Integer>> ans, boolean[] freq, List<Integer> ds){
            if(ds.size()==nums.length){
                ans.add(new ArrayList<>(ds));
                return;
            }
            for(int i =0;i<nums.length;i++){
                if(!freq[i]){
                    freq[i]=true;
                    ds.add(nums[i]);
                    allpermutations(nums,ans,freq,ds);
                    ds.remove(ds.size()-1);
                    freq[i]=false;
                }
            }
    }
    
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] freq = new boolean[nums.length];
        List<Integer> ds = new ArrayList<>();

        allpermutations(nums,ans,freq,ds);
        return ans;
    }
}
------------------------------------------------------------------
// Longest palindromic substring without repeating characters

class Solution {
    public int lengthOfLongestSubstring(String s) {
            if(s == null || s.length()==0){
                return 0;
            }
            HashSet<Character> set = new HashSet<>();
            int left =0;
            int right =0;
            int result = 1;
            for(int i =0;i<s.length();i++){
                char c = s.charAt(i);
                while(set.contains(c)){
                    set.remove(s.charAt(left));
                    left++;
                }
                set.add(c);
                 result = Math.max(result,right-left+1);
                right++;
            }
            return result;
    }
}
---------------------------------------------------------------------





































