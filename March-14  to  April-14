//Contains Duplicate - Leetcode 217
class Solution {
    public int checkpalindrome(String s, int Left, int Right){
        int L = Left, R = Right;
        while(L>=0 && R<s.length() && s.charAt(L)==s.charAt(R)){
            L--;
            R++;
        }
        return R-L-1;

    }
    public String longestPalindrome(String s) {
         if(s==null || s.length()<1){
            return "";
         }
         
         int max = Integer.MIN_VALUE;
         int start =0, end =0;
         for(int i =0;i<s.length();i++){
             int len1 = checkpalindrome(s,i,i); //odd
             int len2 = checkpalindrome(s,i,i+1); //even
             int result = Math.max(len1,len2);
             if(max < result){
                max = result;
                start = i - (result - 1) / 2;
                end = i + (result / 2) + 1;
             }
         }
         return s.substring(start,end);
    }
}
---------------------------------------------------------------------------------------
// Permuntation Leetcode - 46

class Solution {
    public void allpermutations(int[] nums,List<List<Integer>> ans, boolean[] freq, List<Integer> ds){
            if(ds.size()==nums.length){
                ans.add(new ArrayList<>(ds));
                return;
            }
            for(int i =0;i<nums.length;i++){
                if(!freq[i]){
                    freq[i]=true;
                    ds.add(nums[i]);
                    allpermutations(nums,ans,freq,ds);
                    ds.remove(ds.size()-1);
                    freq[i]=false;
                }
            }
    }
    
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] freq = new boolean[nums.length];
        List<Integer> ds = new ArrayList<>();

        allpermutations(nums,ans,freq,ds);
        return ans;
    }
}
------------------------------------------------------------------
// Longest palindromic substring without repeating characters

class Solution {
    public int lengthOfLongestSubstring(String s) {
            if(s == null || s.length()==0){
                return 0;
            }
            HashSet<Character> set = new HashSet<>();
            int left =0;
            int right =0;
            int result = 1;
            for(int i =0;i<s.length();i++){
                char c = s.charAt(i);
                while(set.contains(c)){
                    set.remove(s.charAt(left));
                    left++;
                }
                set.add(c);
                 result = Math.max(result,right-left+1);
                right++;
            }
            return result;
    }
}
---------------------------------------------------------------------

// Maximum Product Subarray

class Solution {
    public int maxProduct(int[] nums) {
        if(nums.length == 0)
        return 0;

        int pre = 1;
        int suf = 1;
        int max = Integer.MIN_VALUE;
        for(int i =0;i<nums.length;i++){
            if(pre==0) pre=1;
            if(suf==0) suf=1;
            pre = pre * nums[i];
            suf = suf * nums[nums.length-i-1];
            max = Math.max(max, Math.max(pre,suf));
        }
        return max;
    }
}
--------------------------------------------------------------------

// coin change

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] atm = new int[amount+1];

        Arrays.fill(atm,amount+1);
        atm[0] = 0;
        for(int i=1;i<amount+1;i++){
            for(int j =0;j<coins.length;j++){
                if(i>=coins[j]){
                    atm[i] = Math.min(atm[i],1+atm[i-coins[j]]);
                }
            }
        }
        if(atm[amount]<amount+1){
            return atm[amount]; 
        }
        return -1;
    }
}
-----------------------------------------------------------------------

// Add two Numbers

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
         ListNode ans = new ListNode(0);
         ListNode dummy = ans;
         int carry = 0;
         while(l1 != null || l2!=null || carry!=0){
            int sum = 0;
            if(l1 != null){
                sum = sum + l1.val;
                l1 = l1.next;
            }
            if(l2 != null){
                sum = sum + l2.val;
                l2 = l2.next;
            }
            sum = sum + carry;
            carry = sum/10;
            ListNode node = new ListNode(sum % 10);
            dummy.next = node;
            dummy = dummy.next;
         }
         return ans.next;
    }
}
---------------------------------------------------------------------------------

// 300.Longest Increasing Subsequence

class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[] ans = new int[n];
        ans[0] = nums[0];
        int k = 1;
        for (int i = 1; i < n; i++) {
            if (ans[k - 1] < nums[i]) {
                ans[k++] = nums[i];
            } else {
                int start = 0, end = k - 1;
                while (start <= end) {
                    int mid = (start + end) / 2;
                    if (ans[mid] < nums[i]) {
                        start = mid + 1; 
                    } else {
                        end = mid - 1; 
                    }
                }
                ans[start] = nums[i]; 
            }
        }

        return k;
    }
}
---------------------------------------------------------------------------------

// 33. Search in Rotated Sorted Array

class Solution {
    public int search(int[] nums, int target) {
            int n = nums.length;
            int start = 0;
            int end = nums.length-1;
            int mid = 0;
            while(start<=end){
                 mid = (start+end)/2;
                if(nums[mid]==target){
                    return mid;
                }
               else if(nums[mid]>=nums[start]){
                    if(target<=nums[mid] && nums[start] <= target){
                        end = mid -1 ;
                    }
                    else{
                        start = mid+1;
                    }
               }
               else{
                    if(target>=nums[mid] && nums[end] >= target){
                        start = mid + 1 ;
                    }
                    else{
                        end = mid-1;
                    }
               }
            }
            return -1;
    }
}
---------------------------------------------------------------------------------

//139. Word Break

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        boolean[] dp = new boolean[s.length()+1];
        Set<String> set = new HashSet<>(wordDict);
        dp[0] = true;
        for(int i =0;i<s.length()+1;i++){
            for(int j =i-1;j>=0;j--){
                if(dp[j] && set.contains(s.substring(j,i))){
                    dp[i]=true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}
------------------------------------------------------------------------------------

































